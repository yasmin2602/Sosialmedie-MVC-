@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor Accessor
@model IEnumerable<photogram.Models.Post>

@{
    ViewData["Title"] = "Feeds";
}

<div class="feed-header text-center my-4">
    <h1 class="fw-bold display-4 text-primary">Photogram Feeds</h1>
    <p class="text-muted fs-5">Discover and share moments with your community.</p>
</div>

<!-- Display existing posts -->
@if (Model != null && Model.Any())
{
    @foreach (var post in Model)
    {
        <div class="main-container">
            <div class="post-holder">
                <!-- Display user information and post content -->
                <div class="post-content">
                <strong>@(string.IsNullOrEmpty(post.UserName) ? "Anonymous" : post.UserName)</strong>
                    <p>@post.Content</p>
                </div>

                <!-- Display the image if it exists -->
                @if (!string.IsNullOrEmpty(post.ImagePath))
                {
                    <img src="@post.ImagePath" alt="Post Image" class="post-image" />
                }

                <!-- Post details, including the timestamp -->
                <div class="post-details">
                    <small>Posted @post.CreatedAt.ToString("g")</small>
                </div>

                <!-- Add Comment Section -->
                <div class="add-comment mt-3">
                    <form asp-action="AddComment" asp-controller="Comments" method="post" class="d-flex align-items-center">
                        <input type="hidden" name="postId" value="@post.Id" />

                        <!-- Placeholder for Add Comment -->
                        <input type="text" class="form-control comment-placeholder"
                               placeholder="Add a comment..."
                               readonly
                               onclick="showCommentField(this)" />

                        <!-- Hidden Textarea -->
                        <textarea name="content" class="form-control comment-field d-none"
                                  placeholder="Write your comment here..."></textarea>

                        <!-- Submit Button -->
                        <button type="submit" class="btn btn-primary ms-2">Comment</button>
                    </form>
                    
                    <!-- Validation Error Display -->
                    @if (TempData["CommentValidationError"] != null)
                    {
                        <p class="text-danger">@TempData["CommentValidationError"]</p>
                    }



                </div>

                <!-- Show Comments Section -->
                <div class="mt-3">
                    <button type="button" class="btn btn-link toggle-comments" data-bs-toggle="collapse" data-bs-target="#comments-@post.Id">
                        View All Comments
                    </button>
                    <div id="comments-@post.Id" class="collapse">
                        @await Html.PartialAsync("_CommentsPartial", post.Comments)
                    </div>
                </div>

                
            </div>
        </div>
    }
}
else
{
    <p>No posts available. Create your first post!</p>
}

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        function showCommentField(placeholder) {
            const form = placeholder.closest('form');
            const textarea = form.querySelector('.comment-field');
            placeholder.classList.add('d-none'); // Hide the placeholder
            textarea.classList.remove('d-none'); // Show the textarea
            textarea.focus(); // Focus on the textarea for the user
        }

        document.addEventListener("DOMContentLoaded", function () {
            // Handle "Edit" button click
            document.querySelectorAll(".edit-comment-btn").forEach(button => {
                button.addEventListener("click", function () {
                    const commentId = this.getAttribute("data-comment-id");
                    const commentText = document.getElementById(`comment-text-${commentId}`);
                    const editForm = document.querySelector(`.edit-comment-form[data-comment-id="${commentId}"]`);

                    // Show the edit form and hide the comment text
                    commentText.style.display = "none";
                    editForm.classList.remove("d-none");
                });
            });

            // Handle "Cancel" button click
            document.querySelectorAll(".cancel-edit").forEach(button => {
                button.addEventListener("click", function () {
                    const commentId = this.getAttribute("data-comment-id");
                    const commentText = document.getElementById(`comment-text-${commentId}`);
                    const editForm = document.querySelector(`.edit-comment-form[data-comment-id="${commentId}"]`);

                    // Show the comment text and hide the edit form
                    commentText.style.display = "inline";
                    editForm.classList.add("d-none");
                });
            });

            // Handle toggle for showing and hiding comments
            const toggleButtons = document.querySelectorAll(".toggle-comments");
            toggleButtons.forEach(button => {
                button.addEventListener("click", function () {
                    const target = this.dataset.bsTarget;
                    const element = document.querySelector(target);

                    if (element.classList.contains("show")) {
                        this.textContent = "All Comments";
                    } else {
                        this.textContent = "All Comments";
                    }
                });
            });
        });
    </script>
}
